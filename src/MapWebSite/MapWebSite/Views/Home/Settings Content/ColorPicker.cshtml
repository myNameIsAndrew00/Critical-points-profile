@model MapWebSite.Domain.ViewModel.ColorPickerViewModel

@using MapWebSite.Types
@using MapWebSite.Resources.text
@{
    Layout = null;
}

<div id="color-picker-content" class="color-picker-content">
    <h1>@TextDictionary.HMenuCPTitleText</h1>
    <article id="picker-info-card">
        <object class="current_displayed_icon"
                width="190px"
                height="160px"
                type="image/svg+xml"
                data="~/Resources/resources/icons/first_gliph.svg" )></object>
        <h4>@TextDictionary.HMenuCPSubtitle1</h4>
        <small>
            @Html.Raw(TextDictionary.HMenuCPArticle1)
        </small>
    </article>
    <article class="color-palette-panel">
        <h4>@TextDictionary.HMenuCPPanelTitle</h4>
        <div class="controls">
            <div class="setting-item input-content">
                <label for="pickerLeftValue">@TextDictionary.HMenuCPMinValueLabel</label>
                <input class="default-input-gray" type="number" onkeyup="minMaxValueChanged()" id="pickerLeftValue" value="0" />
            </div>
            <div class="setting-item input-content">
                <label for="pickerRightValue">@TextDictionary.HMenuCPMaxValueLabel</label>
                <input class="default-input-gray" type="number" onkeyup="minMaxValueChanged()" id="pickerRightValue" value="100" />
            </div>
            <div class="setting-item input-content">
                <label for="criteriaValue">@TextDictionary.HMenuCPCriteriaLabel</label>
                <input class="default-input-gray" id="criteriaValue" value="Height" />
            </div>
            <div class="setting-item input-content">
                <label for="displayPercent">@TextDictionary.HMenuCPDisplayPercentLabel</label>
                <input class="default-input-gray" type="checkbox" onchange="displayPercentChanged()"  id="displayPercent" checked />
            </div>

        </div>

        <div class="palette-templates-container">
            <h5>@TextDictionary.HMenuCPTemplatesTitle</h5>
            <div class="palette-templates">
                @foreach (ColorPickerViewModel.DefaultPalette defaultPalette in Enum.GetValues(typeof(ColorPickerViewModel.DefaultPalette)))
                {
                    <div class="template-card">
                        <button onclick="usePaletteTemplate('@defaultPalette.GetEnumString()')">
                            <img src="~/Resources/resources/icons/palette_template_@(defaultPalette.ToString()).svg" />
                        </button>
                        <label>@Html.Raw(defaultPalette.ToString())</label>
                    </div>
                }
            </div>
        </div>
    </article>
    <div id="color-picker-container"
         class="color-picker-container"
         onmousemove="changePosition()"
         onmousedown="changeButtonState(true)"
         onmouseup="changeButtonState(false)">
        <button id="slider" class="bar"
                onclick="addDot()"></button>
        <div id="dots-container">
            <span draggable="false" id="dot-1" class="dot" onmousedown="changeSelectedDot()"></span>
            <label style="left:30px">Min.</label>
            <label style="left:816px">Max.</label>
        </div>

        <div id="color-picker" class="color-picker color-picker-hidden">
            <div class="color-picker-tumb"></div>
            <div class="color-container">
                @foreach (ColorPickerViewModel.PaletteColorsHue color in Enum.GetValues(typeof(ColorPickerViewModel.PaletteColorsHue)))
                {
                    <table id="picker-@Html.Raw((int)color)" class="@Html.Raw(color == ColorPickerViewModel.PaletteColorsHue.Red ? "palette-active" : "")">
                        @{
                            string[] colors = Model.GetColors(color).ToArray();

                            for (int i = 0; i < 2; i++)
                            {
                                <tr>
                                    @for (int j = 0; j < colors.Length / 2; j++)
                                    {
                                        <th onclick="changeSpanColor('@colors[8 * i + j]')" style="background: @colors[8 * i + j]" />
                                    }
                                </tr>
                            }
                        }
                    </table>
                }
                <div class="main-color-list">
                    @foreach (ColorPickerViewModel.PaletteColorsHue color in Enum.GetValues(typeof(ColorPickerViewModel.PaletteColorsHue)))
                    {
                        <span onclick="changeActivePalette(@Html.Raw((int)color))" style="background-color: @Model.GetColor(color)"></span>
                    }
                </div>
                <button onclick="changeColorPickerVisibility(false)">@TextDictionary.HMenuCPClosePicker</button>
                <button class="close-button" onclick="removeDot()">X</button>
            </div>

        </div>
    </div>
</div>


<div id="color-picker-info-container"
     class="color-picker-info-container">

    <section class="instructions-container" id="instructions-container">

        <article id="name-info-card">
            <object class="current_displayed_icon"
                    width="190px"
                    height="160px"
                    type="image/svg+xml"
                    data="~/Resources/resources/icons/second_gliph.svg" )></object>
            <h4>@TextDictionary.HMenuCPSubtitle2</h4>
            <small>@Html.Raw(TextDictionary.HMenuCPArticle2)</small>
            <br />
            <input onkeyup="enableSubmit()" id="color-palette-name" type="text" placeholder="@TextDictionary.HMenuCPNameInput">
        </article>
        <article id="finish-info-card">
            <object class="current_displayed_icon"
                    width="190px"
                    height="160px"
                    type="image/svg+xml"
                    data="~/Resources/resources/icons/third_gliph.svg" )></object>
            <h4>@TextDictionary.HMenuCPSubtitle3</h4>
            <small>
                @Html.Raw(TextDictionary.HMenuCPArticle3)
            </small><br />
            <button id="send-palette-button" onclick="sendColorPalette()" disabled>@TextDictionary.HMenuCPSubmitButton</button>
        </article>
    </section>
</div>

<script>
    getScript('#settings-layer', '/Resources/js/settings/color_picker_color_list.js');
    getScript('#settings-layer', '/Resources/js/settings/settings_color_picker.js');

    if (window.resetColorList !== undefined) resetColorList();
</script>